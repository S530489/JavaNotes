Java features
Data types
Literals
Array



-----Data Types--------
WE can give long value to a float variable

long l = 1234;
float f = l; // perfectly valid

------Type casting---
Implicit casting : smaller data type to bigger data type
Widening or upcasting
Explicit casting : Bigger type to smaller data type
Narrowing or downcasting

----Arrays----

int[] x[] --Two dimensional array
int[][] x --Two dimensional array
int x[][] --Two dimensional array

int[] []a,b -- a,b are Two dimensional arrays
int[] a,b[] -- a-1,b-2 dimensional array
int[] []a,[]b -- a-2,b- syntax error -- We can give dimension to only first variable by having [] "before" variable name
----------------------------------------After variable name we can give dimensions.

int[] x = new x[-5] -- Compiles successfully but run time error -- negative arraySize exception

Difference between Array(java.lang) and Arrays(java.util.Arrays)
Ex: Arrays.sort(arrayName)

possible values for array declaration-- int[] x = new int[size]
size can be only byte,short,char,int

int[][] x = new int[][5] // Wrong
int[][][] z = new int[3][][3] // Wrong base value must be there before giving size to next level array.

make sure difference between length vs length().
---Anonymous Array--
just used for instant purose, never goning to use again
ex: new int[] {1,2,3,4}  // No name, just used for instant purpose, not able to use again as there is no name.

* size and initilization should not be given
ex: int[] x = new int[5]; // valid
    int[] x = new int[] {1,2,3,4,5} // valid
    int[] x = new int[5]{1,2,3,4,5} // Invalid


String s;
s.concat("shhiva") // Wrong --We cannot add or perform any operation on null like s.length();
Picture-- 1

------------------------------------------------------
VAriables:
Based on type of value-
Primitive- variables holding primitive values
Reference- variable holding objects
Based on behaviour and place where it is declared
1. Instance variables- If the value of a variable is different from object to object(Objet level variable).
ex: class Student{
    String name; // Instance variable
    int rollNo; // instance variable
    
2. Static variable - If the vaue of a variable is same for different objects(Class level variable).
video 13 and 14 most important.
//static methodscannot be empty
// We cannot access instant variables in static methods or blocks // most important

3. Local variables
// JVM will not provide default values to local variables. If not provided initilization compiler will give left and right only when we try to access it.
// scope is between {}.

--------Main method-------
Public static void main(String[] args) // syntax JVMlooks for
video 17 for main method

-----Operators and assignments--------
Increment and decrement operator cannot be applied on values and final variables // ++10 // Wrong ---- 
final int x = 100
x++ // compile time error
if we want to use == operator the operands shuld have some relation i.e we have to check == for parent to child, child to parent or for same type objects
student == teacher // compile tme error-- incomaprable typrs


    
    
